<?php

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\group_user_field_access\Controller\UserFieldAccessController;
use Drupal\group_user_field_access\Form\UserFieldAccessSettingsFrom;

/**
 * Implements hook_entity_access().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultNeutral
 */
function group_user_field_access_user_access(EntityInterface $entity, $operation, AccountInterface $account) {
  $allow_to_edit_user = UserFieldAccessController::teamCoordinatorCanEditUser($account, $entity);

  if ($allow_to_edit_user) {
    return AccessResult::allowed();
  }
  else {
    return AccessResult::neutral();
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 *
 */
function group_user_field_access_form_user_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $user = \Drupal::currentUser();

  if ($user->hasPermission('administer')) {
    return;
  };

  // get user param from route
  $route = \Drupal::routeMatch();
  $edit_user = $route->getParameter('user');

  $allow_to_edit_user = UserFieldAccessController::teamCoordinatorCanEditUser($user, $edit_user);

  if (!$allow_to_edit_user) {
    return;
  }

  // hide/remove account fields that user don't able to see
  foreach (UserFieldAccessController::HIDDEN_ACCOUNT_FIELDS as $field) {
    if (isset($form['account'][$field])) {
      $form['account'][$field]['#access'] = FALSE;
    }
  }

  // hide other fields that user don't able to see
  foreach (UserFieldAccessController::HIDDEN_FIELDS as $field) {
    if (isset($form[$field])) {
      $form[$field]['#access'] = FALSE;
    }
  }

  foreach (UserFieldAccessController::READ_ONLY_ACCOUNT_FIELDS as $field) {
    if (isset($form['account'][$field])) {
      $form['account'][$field]['#attributes'] = [
        'disabled' => 'disabled',
        'readonly' => 'readonly',
      ];
    }
  }

  foreach (UserFieldAccessController::READ_ONLY_FIELDS as $field) {
    if (isset($form[$field])) {
      $form['account']['#attributes'] = [
        'disabled' => 'disabled',
        'readonly' => 'readonly',
      ];
    }
  }

  // get module settings for field access
  $field_access_settings = UserFieldAccessSettingsFrom::getSettings();

  $editable_fields = $field_access_settings->get('editable_user_fields');

  if (!$editable_fields) {
    $editable_fields = [];
  }

  // Get list of user fields from /admin/config/people/accounts/fields page
  $custom_account_fields = UserFieldAccessController::getUserAccountFileds();

  // hide custom field if it not exist in saved settings
  foreach ($custom_account_fields as $custom_account_field => $custom_account_field_label) {
    if (!isset($editable_fields[$custom_account_field]) || (isset($editable_fields[$custom_account_field]) && $editable_fields[$custom_account_field] === 0)) {
      $form[$custom_account_field]['#access'] = FALSE;
    }
  }

  // list of elements that not need to process
  $form_exclude_elements = [
    'account',
    'form_build_id',
    'form_token',
    'footer',
    'actions',
  ];

  // hide other fields that not in lists
  foreach ($form as $name => $el) {
    // check if $name not from setting
    if (strpos($name, '#') === FALSE) {
      if (in_array($name, $form_exclude_elements)) {
        continue;
      }

      if (!in_array($name, array_keys($custom_account_fields)) && !in_array($name, UserFieldAccessController::read_only_fields)) {
        $form[$name]['#access'] = FALSE;
      }
    }
  }
}